{"ast":null,"code":"const API_BASE_URL = process.env.NODE_ENV === 'production' ? '/api' : 'http://localhost:3001/api';\nclass ApiService {\n  // User management\n  async createUser(username, password, email = null) {\n    const response = await fetch(`${API_BASE_URL}/users`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username,\n        password,\n        email\n      })\n    });\n    return response.json();\n  }\n  async loginUser(username, password) {\n    const response = await fetch(`${API_BASE_URL}/users/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username,\n        password\n      })\n    });\n    return response.json();\n  }\n  async getUser(id) {\n    const response = await fetch(`${API_BASE_URL}/users/${id}`);\n    return response.json();\n  }\n  async getAllUsers() {\n    const response = await fetch(`${API_BASE_URL}/users`);\n    return response.json();\n  }\n\n  // Game sessions\n  async createGameSession(userId, gameData) {\n    const {\n      score,\n      timeLeft,\n      sentencesCompleted,\n      accuracy,\n      wpm\n    } = gameData;\n    const response = await fetch(`${API_BASE_URL}/sessions`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        user_id: userId,\n        score,\n        time_left: timeLeft,\n        sentences_completed: sentencesCompleted,\n        accuracy,\n        wpm\n      })\n    });\n    return response.json();\n  }\n  async getUserSessions(userId) {\n    const response = await fetch(`${API_BASE_URL}/users/${userId}/sessions`);\n    return response.json();\n  }\n\n  // Sentence attempts\n  async saveSentenceAttempt(sessionId, sentence, userInput, isCorrect, timeTaken) {\n    const response = await fetch(`${API_BASE_URL}/sentence-attempts`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        session_id: sessionId,\n        sentence,\n        user_input: userInput,\n        is_correct: isCorrect,\n        time_taken: timeTaken\n      })\n    });\n    return response.json();\n  }\n\n  // Statistics\n  async getUserStats(userId) {\n    const response = await fetch(`${API_BASE_URL}/users/${userId}/stats`);\n    return response.json();\n  }\n  async getLeaderboard() {\n    const response = await fetch(`${API_BASE_URL}/leaderboard`);\n    return response.json();\n  }\n\n  // Health check\n  async checkHealth() {\n    const response = await fetch(`${API_BASE_URL}/health`);\n    return response.json();\n  }\n}\nconst apiService = new ApiService();\nexport default apiService;","map":{"version":3,"names":["API_BASE_URL","process","env","NODE_ENV","ApiService","createUser","username","password","email","response","fetch","method","headers","body","JSON","stringify","json","loginUser","getUser","id","getAllUsers","createGameSession","userId","gameData","score","timeLeft","sentencesCompleted","accuracy","wpm","user_id","time_left","sentences_completed","getUserSessions","saveSentenceAttempt","sessionId","sentence","userInput","isCorrect","timeTaken","session_id","user_input","is_correct","time_taken","getUserStats","getLeaderboard","checkHealth","apiService"],"sources":["/Users/bijoux/code/Typing-Game/typing-game/src/services/api.js"],"sourcesContent":["const API_BASE_URL = process.env.NODE_ENV === 'production' \n    ? '/api' \n    : 'http://localhost:3001/api';\n\nclass ApiService {\n    // User management\n    async createUser(username, password, email = null) {\n        const response = await fetch(`${API_BASE_URL}/users`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ username, password, email }),\n        });\n        return response.json();\n    }\n\n    async loginUser(username, password) {\n        const response = await fetch(`${API_BASE_URL}/users/login`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ username, password }),\n        });\n        return response.json();\n    }\n\n    async getUser(id) {\n        const response = await fetch(`${API_BASE_URL}/users/${id}`);\n        return response.json();\n    }\n\n    async getAllUsers() {\n        const response = await fetch(`${API_BASE_URL}/users`);\n        return response.json();\n    }\n\n    // Game sessions\n    async createGameSession(userId, gameData) {\n        const { score, timeLeft, sentencesCompleted, accuracy, wpm } = gameData;\n        const response = await fetch(`${API_BASE_URL}/sessions`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                user_id: userId,\n                score,\n                time_left: timeLeft,\n                sentences_completed: sentencesCompleted,\n                accuracy,\n                wpm,\n            }),\n        });\n        return response.json();\n    }\n\n    async getUserSessions(userId) {\n        const response = await fetch(`${API_BASE_URL}/users/${userId}/sessions`);\n        return response.json();\n    }\n\n    // Sentence attempts\n    async saveSentenceAttempt(sessionId, sentence, userInput, isCorrect, timeTaken) {\n        const response = await fetch(`${API_BASE_URL}/sentence-attempts`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                session_id: sessionId,\n                sentence,\n                user_input: userInput,\n                is_correct: isCorrect,\n                time_taken: timeTaken,\n            }),\n        });\n        return response.json();\n    }\n\n    // Statistics\n    async getUserStats(userId) {\n        const response = await fetch(`${API_BASE_URL}/users/${userId}/stats`);\n        return response.json();\n    }\n\n    async getLeaderboard() {\n        const response = await fetch(`${API_BASE_URL}/leaderboard`);\n        return response.json();\n    }\n\n    // Health check\n    async checkHealth() {\n        const response = await fetch(`${API_BASE_URL}/health`);\n        return response.json();\n    }\n}\n\nconst apiService = new ApiService();\nexport default apiService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}