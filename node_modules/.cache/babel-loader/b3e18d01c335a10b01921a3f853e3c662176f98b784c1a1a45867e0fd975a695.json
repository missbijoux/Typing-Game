{"ast":null,"code":"const API_BASE_URL=process.env.NODE_ENV==='production'?'/api':'http://localhost:3001/api';class ApiService{// User management\nasync createUser(username,password){let email=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;console.log('API: Creating user with URL:',\"\".concat(API_BASE_URL,\"/users\"));const response=await fetch(\"\".concat(API_BASE_URL,\"/users\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({username,password,email})});console.log('API: Create user response status:',response.status);if(!response.ok){const errorData=await response.json().catch(()=>({error:'Unknown error'}));console.error('API: Create user error:',errorData);throw new Error(errorData.error||\"HTTP \".concat(response.status));}const result=await response.json();console.log('API: Create user success:',result);return result;}async loginUser(username,password){console.log('API: Logging in user with URL:',\"\".concat(API_BASE_URL,\"/users/login\"));const response=await fetch(\"\".concat(API_BASE_URL,\"/users/login\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({username,password})});console.log('API: Login response status:',response.status);if(!response.ok){const errorData=await response.json().catch(()=>({error:'Unknown error'}));console.error('API: Login error:',errorData);throw new Error(errorData.error||\"HTTP \".concat(response.status));}const result=await response.json();console.log('API: Login success:',result);return result;}async getUser(id){const response=await fetch(\"\".concat(API_BASE_URL,\"/users/\").concat(id));return response.json();}async getAllUsers(){const response=await fetch(\"\".concat(API_BASE_URL,\"/users\"));return response.json();}// Game sessions\nasync createGameSession(userId,gameData){const{score,timeLeft,sentencesCompleted,accuracy,wpm}=gameData;const response=await fetch(\"\".concat(API_BASE_URL,\"/sessions\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({user_id:userId,score,time_left:timeLeft,sentences_completed:sentencesCompleted,accuracy,wpm})});return response.json();}async getUserSessions(userId){const response=await fetch(\"\".concat(API_BASE_URL,\"/users/\").concat(userId,\"/sessions\"));return response.json();}// Sentence attempts\nasync saveSentenceAttempt(sessionId,sentence,userInput,isCorrect,timeTaken){const response=await fetch(\"\".concat(API_BASE_URL,\"/sentence-attempts\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({session_id:sessionId,sentence,user_input:userInput,is_correct:isCorrect,time_taken:timeTaken})});return response.json();}// Statistics\nasync getUserStats(userId){const response=await fetch(\"\".concat(API_BASE_URL,\"/users/\").concat(userId,\"/stats\"));return response.json();}async getLeaderboard(){console.log('API: Fetching leaderboard with URL:',\"\".concat(API_BASE_URL,\"/leaderboard\"));const response=await fetch(\"\".concat(API_BASE_URL,\"/leaderboard\"));console.log('API: Leaderboard response status:',response.status);if(!response.ok){const errorData=await response.json().catch(()=>({error:'Unknown error'}));console.error('API: Leaderboard error:',errorData);throw new Error(errorData.error||\"HTTP \".concat(response.status));}const result=await response.json();console.log('API: Leaderboard success:',result);return result;}// Health check\nasync checkHealth(){const response=await fetch(\"\".concat(API_BASE_URL,\"/health\"));return response.json();}}const apiService=new ApiService();export default apiService;","map":{"version":3,"names":["API_BASE_URL","process","env","NODE_ENV","ApiService","createUser","username","password","email","arguments","length","undefined","console","log","concat","response","fetch","method","headers","body","JSON","stringify","status","ok","errorData","json","catch","error","Error","result","loginUser","getUser","id","getAllUsers","createGameSession","userId","gameData","score","timeLeft","sentencesCompleted","accuracy","wpm","user_id","time_left","sentences_completed","getUserSessions","saveSentenceAttempt","sessionId","sentence","userInput","isCorrect","timeTaken","session_id","user_input","is_correct","time_taken","getUserStats","getLeaderboard","checkHealth","apiService"],"sources":["/Users/bijoux/code/Typing-Game/typing-game/src/services/api.js"],"sourcesContent":["const API_BASE_URL = process.env.NODE_ENV === 'production' \n    ? '/api' \n    : 'http://localhost:3001/api';\n\nclass ApiService {\n    // User management\n    async createUser(username, password, email = null) {\n        console.log('API: Creating user with URL:', `${API_BASE_URL}/users`);\n        const response = await fetch(`${API_BASE_URL}/users`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ username, password, email }),\n        });\n        \n        console.log('API: Create user response status:', response.status);\n        \n        if (!response.ok) {\n            const errorData = await response.json().catch(() => ({ error: 'Unknown error' }));\n            console.error('API: Create user error:', errorData);\n            throw new Error(errorData.error || `HTTP ${response.status}`);\n        }\n        \n        const result = await response.json();\n        console.log('API: Create user success:', result);\n        return result;\n    }\n\n    async loginUser(username, password) {\n        console.log('API: Logging in user with URL:', `${API_BASE_URL}/users/login`);\n        const response = await fetch(`${API_BASE_URL}/users/login`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ username, password }),\n        });\n        \n        console.log('API: Login response status:', response.status);\n        \n        if (!response.ok) {\n            const errorData = await response.json().catch(() => ({ error: 'Unknown error' }));\n            console.error('API: Login error:', errorData);\n            throw new Error(errorData.error || `HTTP ${response.status}`);\n        }\n        \n        const result = await response.json();\n        console.log('API: Login success:', result);\n        return result;\n    }\n\n    async getUser(id) {\n        const response = await fetch(`${API_BASE_URL}/users/${id}`);\n        return response.json();\n    }\n\n    async getAllUsers() {\n        const response = await fetch(`${API_BASE_URL}/users`);\n        return response.json();\n    }\n\n    // Game sessions\n    async createGameSession(userId, gameData) {\n        const { score, timeLeft, sentencesCompleted, accuracy, wpm } = gameData;\n        const response = await fetch(`${API_BASE_URL}/sessions`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                user_id: userId,\n                score,\n                time_left: timeLeft,\n                sentences_completed: sentencesCompleted,\n                accuracy,\n                wpm,\n            }),\n        });\n        return response.json();\n    }\n\n    async getUserSessions(userId) {\n        const response = await fetch(`${API_BASE_URL}/users/${userId}/sessions`);\n        return response.json();\n    }\n\n    // Sentence attempts\n    async saveSentenceAttempt(sessionId, sentence, userInput, isCorrect, timeTaken) {\n        const response = await fetch(`${API_BASE_URL}/sentence-attempts`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                session_id: sessionId,\n                sentence,\n                user_input: userInput,\n                is_correct: isCorrect,\n                time_taken: timeTaken,\n            }),\n        });\n        return response.json();\n    }\n\n    // Statistics\n    async getUserStats(userId) {\n        const response = await fetch(`${API_BASE_URL}/users/${userId}/stats`);\n        return response.json();\n    }\n\n    async getLeaderboard() {\n        console.log('API: Fetching leaderboard with URL:', `${API_BASE_URL}/leaderboard`);\n        const response = await fetch(`${API_BASE_URL}/leaderboard`);\n        \n        console.log('API: Leaderboard response status:', response.status);\n        \n        if (!response.ok) {\n            const errorData = await response.json().catch(() => ({ error: 'Unknown error' }));\n            console.error('API: Leaderboard error:', errorData);\n            throw new Error(errorData.error || `HTTP ${response.status}`);\n        }\n        \n        const result = await response.json();\n        console.log('API: Leaderboard success:', result);\n        return result;\n    }\n\n    // Health check\n    async checkHealth() {\n        const response = await fetch(`${API_BASE_URL}/health`);\n        return response.json();\n    }\n}\n\nconst apiService = new ApiService();\nexport default apiService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}