{"ast":null,"code":"const API_BASE_URL = process.env.NODE_ENV === 'production' ? '/api' : 'http://localhost:3001/api';\nclass ApiService {\n  // User management\n  async createUser(username, password, email = null) {\n    console.log('API: Creating user with URL:', `${API_BASE_URL}/users`);\n    const response = await fetch(`${API_BASE_URL}/users`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username,\n        password,\n        email\n      })\n    });\n    console.log('API: Create user response status:', response.status);\n    if (!response.ok) {\n      const errorData = await response.json().catch(() => ({\n        error: 'Unknown error'\n      }));\n      console.error('API: Create user error:', errorData);\n      throw new Error(errorData.error || `HTTP ${response.status}`);\n    }\n    const result = await response.json();\n    console.log('API: Create user success:', result);\n    return result;\n  }\n  async loginUser(username, password) {\n    console.log('API: Logging in user with URL:', `${API_BASE_URL}/users/login`);\n    const response = await fetch(`${API_BASE_URL}/users/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username,\n        password\n      })\n    });\n    console.log('API: Login response status:', response.status);\n    if (!response.ok) {\n      const errorData = await response.json().catch(() => ({\n        error: 'Unknown error'\n      }));\n      console.error('API: Login error:', errorData);\n      throw new Error(errorData.error || `HTTP ${response.status}`);\n    }\n    const result = await response.json();\n    console.log('API: Login success:', result);\n    return result;\n  }\n  async getUser(id) {\n    const response = await fetch(`${API_BASE_URL}/users/${id}`);\n    return response.json();\n  }\n  async getAllUsers() {\n    const response = await fetch(`${API_BASE_URL}/users`);\n    return response.json();\n  }\n\n  // Game sessions\n  async createGameSession(userId, gameData) {\n    const {\n      score,\n      timeLeft,\n      sentencesCompleted,\n      accuracy,\n      wpm\n    } = gameData;\n    const response = await fetch(`${API_BASE_URL}/sessions`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        user_id: userId,\n        score,\n        time_left: timeLeft,\n        sentences_completed: sentencesCompleted,\n        accuracy,\n        wpm\n      })\n    });\n    return response.json();\n  }\n  async getUserSessions(userId) {\n    const response = await fetch(`${API_BASE_URL}/users/${userId}/sessions`);\n    return response.json();\n  }\n\n  // Sentence attempts\n  async saveSentenceAttempt(sessionId, sentence, userInput, isCorrect, timeTaken) {\n    const response = await fetch(`${API_BASE_URL}/sentence-attempts`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        session_id: sessionId,\n        sentence,\n        user_input: userInput,\n        is_correct: isCorrect,\n        time_taken: timeTaken\n      })\n    });\n    return response.json();\n  }\n\n  // Statistics\n  async getUserStats(userId) {\n    const response = await fetch(`${API_BASE_URL}/users/${userId}/stats`);\n    return response.json();\n  }\n  async getLeaderboard() {\n    console.log('API: Fetching leaderboard with URL:', `${API_BASE_URL}/leaderboard`);\n    const response = await fetch(`${API_BASE_URL}/leaderboard`);\n    console.log('API: Leaderboard response status:', response.status);\n    if (!response.ok) {\n      const errorData = await response.json().catch(() => ({\n        error: 'Unknown error'\n      }));\n      console.error('API: Leaderboard error:', errorData);\n      throw new Error(errorData.error || `HTTP ${response.status}`);\n    }\n    const result = await response.json();\n    console.log('API: Leaderboard success:', result);\n    return result;\n  }\n\n  // Health check\n  async checkHealth() {\n    const response = await fetch(`${API_BASE_URL}/health`);\n    return response.json();\n  }\n}\nconst apiService = new ApiService();\nexport default apiService;","map":{"version":3,"names":["API_BASE_URL","process","env","NODE_ENV","ApiService","createUser","username","password","email","console","log","response","fetch","method","headers","body","JSON","stringify","status","ok","errorData","json","catch","error","Error","result","loginUser","getUser","id","getAllUsers","createGameSession","userId","gameData","score","timeLeft","sentencesCompleted","accuracy","wpm","user_id","time_left","sentences_completed","getUserSessions","saveSentenceAttempt","sessionId","sentence","userInput","isCorrect","timeTaken","session_id","user_input","is_correct","time_taken","getUserStats","getLeaderboard","checkHealth","apiService"],"sources":["/Users/bijoux/code/Typing-Game/typing-game/src/services/api.js"],"sourcesContent":["const API_BASE_URL = process.env.NODE_ENV === 'production' \n    ? '/api' \n    : 'http://localhost:3001/api';\n\nclass ApiService {\n    // User management\n    async createUser(username, password, email = null) {\n        console.log('API: Creating user with URL:', `${API_BASE_URL}/users`);\n        const response = await fetch(`${API_BASE_URL}/users`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ username, password, email }),\n        });\n        \n        console.log('API: Create user response status:', response.status);\n        \n        if (!response.ok) {\n            const errorData = await response.json().catch(() => ({ error: 'Unknown error' }));\n            console.error('API: Create user error:', errorData);\n            throw new Error(errorData.error || `HTTP ${response.status}`);\n        }\n        \n        const result = await response.json();\n        console.log('API: Create user success:', result);\n        return result;\n    }\n\n    async loginUser(username, password) {\n        console.log('API: Logging in user with URL:', `${API_BASE_URL}/users/login`);\n        const response = await fetch(`${API_BASE_URL}/users/login`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ username, password }),\n        });\n        \n        console.log('API: Login response status:', response.status);\n        \n        if (!response.ok) {\n            const errorData = await response.json().catch(() => ({ error: 'Unknown error' }));\n            console.error('API: Login error:', errorData);\n            throw new Error(errorData.error || `HTTP ${response.status}`);\n        }\n        \n        const result = await response.json();\n        console.log('API: Login success:', result);\n        return result;\n    }\n\n    async getUser(id) {\n        const response = await fetch(`${API_BASE_URL}/users/${id}`);\n        return response.json();\n    }\n\n    async getAllUsers() {\n        const response = await fetch(`${API_BASE_URL}/users`);\n        return response.json();\n    }\n\n    // Game sessions\n    async createGameSession(userId, gameData) {\n        const { score, timeLeft, sentencesCompleted, accuracy, wpm } = gameData;\n        const response = await fetch(`${API_BASE_URL}/sessions`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                user_id: userId,\n                score,\n                time_left: timeLeft,\n                sentences_completed: sentencesCompleted,\n                accuracy,\n                wpm,\n            }),\n        });\n        return response.json();\n    }\n\n    async getUserSessions(userId) {\n        const response = await fetch(`${API_BASE_URL}/users/${userId}/sessions`);\n        return response.json();\n    }\n\n    // Sentence attempts\n    async saveSentenceAttempt(sessionId, sentence, userInput, isCorrect, timeTaken) {\n        const response = await fetch(`${API_BASE_URL}/sentence-attempts`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                session_id: sessionId,\n                sentence,\n                user_input: userInput,\n                is_correct: isCorrect,\n                time_taken: timeTaken,\n            }),\n        });\n        return response.json();\n    }\n\n    // Statistics\n    async getUserStats(userId) {\n        const response = await fetch(`${API_BASE_URL}/users/${userId}/stats`);\n        return response.json();\n    }\n\n    async getLeaderboard() {\n        console.log('API: Fetching leaderboard with URL:', `${API_BASE_URL}/leaderboard`);\n        const response = await fetch(`${API_BASE_URL}/leaderboard`);\n        \n        console.log('API: Leaderboard response status:', response.status);\n        \n        if (!response.ok) {\n            const errorData = await response.json().catch(() => ({ error: 'Unknown error' }));\n            console.error('API: Leaderboard error:', errorData);\n            throw new Error(errorData.error || `HTTP ${response.status}`);\n        }\n        \n        const result = await response.json();\n        console.log('API: Leaderboard success:', result);\n        return result;\n    }\n\n    // Health check\n    async checkHealth() {\n        const response = await fetch(`${API_BASE_URL}/health`);\n        return response.json();\n    }\n}\n\nconst apiService = new ApiService();\nexport default apiService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}